<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classlt_1_1ReactorServer_1_1Session" kind="class" language="C++" prot="public">
    <compoundname>lt::ReactorServer::Session</compoundname>
    <includes refid="ReactorServer_8hpp" local="no">ReactorServer.hpp</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classlt_1_1ReactorServer_1_1Session_1a88ab73dbc095f968fbfc05d27a445a2f" prot="protected" static="no" mutable="no">
        <type>friend</type>
        <definition>friend lt::ReactorServer&lt; Req, Rep, ProgressData &gt;::Session::Backend</definition>
        <argsstring></argsstring>
        <name>Backend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ReactorServer.hpp" line="57" column="16" bodyfile="/home/mike/git/letstalk/src/ReactorServer.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlt_1_1ReactorServer_1_1Session_1a11a2b26c2cc4185188f1cee239b39779" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; Backend &gt;</type>
        <definition>std::shared_ptr&lt;Backend&gt; lt::ReactorServer&lt; Req, Rep, ProgressData &gt;::Session::m_reactor</definition>
        <argsstring></argsstring>
        <name>m_reactor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ReactorServer.hpp" line="61" column="25" bodyfile="/home/mike/git/letstalk/src/ReactorServer.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlt_1_1ReactorServer_1_1Session_1a459846eff5d2a92355c2c19cebe27a4f" prot="protected" static="no" mutable="no">
        <type>Req</type>
        <definition>Req lt::ReactorServer&lt; Req, Rep, ProgressData &gt;::Session::m_request</definition>
        <argsstring></argsstring>
        <name>m_request</name>
        <briefdescription>
<para>All calls are forwarded to the reactor server object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ReactorServer.hpp" line="62" column="13" bodyfile="/home/mike/git/letstalk/src/ReactorServer.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlt_1_1ReactorServer_1_1Session_1a4918229d6b17fcfd20313daa008ecc9a" prot="protected" static="no" mutable="no">
        <type><ref refid="structlt_1_1Guid" kindref="compound">Guid</ref></type>
        <definition>Guid lt::ReactorServer&lt; Req, Rep, ProgressData &gt;::Session::m_id</definition>
        <argsstring></argsstring>
        <name>m_id</name>
        <briefdescription>
<para>Request that kicked off this session. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ReactorServer.hpp" line="63" column="14" bodyfile="/home/mike/git/letstalk/src/ReactorServer.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlt_1_1ReactorServer_1_1Session_1ab9b04997dc12acf76ab9421ef7c681a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Req const  &amp;</type>
        <definition>Req const&amp; lt::ReactorServer&lt; Req, Rep, ProgressData &gt;::Session::request</definition>
        <argsstring>() const</argsstring>
        <name>request</name>
        <briefdescription>
<para>Inspect the request data for this session. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ReactorServer.hpp" line="27" column="19" bodyfile="/home/mike/git/letstalk/src/ReactorServer.hpp" bodystart="27" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1ReactorServer_1_1Session_1aab7a8fb6e60d5d3928a39b10eb1c6489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lt::ReactorServer&lt; Req, Rep, ProgressData &gt;::Session::progress</definition>
        <argsstring>(int i_progress, ProgressData const &amp;i_data)</argsstring>
        <name>progress</name>
        <param>
          <type>int</type>
          <declname>i_progress</declname>
        </param>
        <param>
          <type>ProgressData const &amp;</type>
          <declname>i_data</declname>
        </param>
        <briefdescription>
<para>Transmit progress information to the client. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i_progress</parametername>
</parameternamelist>
<parameterdescription>
<para>Current progress mark </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Related progress data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ReactorServer.hpp" line="34" column="14" bodyfile="/home/mike/git/letstalk/src/ReactorServerImpl.hpp" bodystart="218" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1ReactorServer_1_1Session_1ac656a4fa279048808471e02fbedf81f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lt::ReactorServer&lt; Req, Rep, ProgressData &gt;::Session::progress</definition>
        <argsstring>(int i_progress)</argsstring>
        <name>progress</name>
        <param>
          <type>int</type>
          <declname>i_progress</declname>
        </param>
        <briefdescription>
<para>Transmit progress information to the client. This version does not send progress data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i_progress</parametername>
</parameternamelist>
<parameterdescription>
<para>Current progress mark </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ReactorServer.hpp" line="40" column="14" bodyfile="/home/mike/git/letstalk/src/ReactorServer.hpp" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1ReactorServer_1_1Session_1a18562c2b4ad078253807f08bb17af9cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lt::ReactorServer&lt; Req, Rep, ProgressData &gt;::Session::isAlive</definition>
        <argsstring>() const</argsstring>
        <name>isAlive</name>
        <briefdescription>
<para>Check that the client hasn&apos;t cancelled this session, or that it isn&apos;t already complete. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ReactorServer.hpp" line="43" column="14" bodyfile="/home/mike/git/letstalk/src/ReactorServerImpl.hpp" bodystart="270" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1ReactorServer_1_1Session_1aeb54854aadc43cb2a41073209e23f50c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lt::ReactorServer&lt; Req, Rep, ProgressData &gt;::Session::reply</definition>
        <argsstring>(Rep const &amp;i_reply)</argsstring>
        <name>reply</name>
        <param>
          <type>Rep const &amp;</type>
          <declname>i_reply</declname>
        </param>
        <briefdescription>
<para>Send the reply, ending the session. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ReactorServer.hpp" line="46" column="14" bodyfile="/home/mike/git/letstalk/src/ReactorServerImpl.hpp" bodystart="212" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1ReactorServer_1_1Session_1a95250944b2a1fd51c4d41ba7414d42bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lt::ReactorServer&lt; Req, Rep, P &gt;::Session::fail</definition>
        <argsstring>()</argsstring>
        <name>fail</name>
        <briefdescription>
<para>Mark the request as failed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ReactorServer.hpp" line="49" column="14" bodyfile="/home/mike/git/letstalk/src/ReactorServerImpl.hpp" bodystart="239" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1ReactorServer_1_1Session_1a0eb973751cc906b878685e4c7a92f4b0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structlt_1_1Guid" kindref="compound">Guid</ref> const  &amp;</type>
        <definition>Guid const&amp; lt::ReactorServer&lt; Req, Rep, ProgressData &gt;::Session::id</definition>
        <argsstring>() const</argsstring>
        <name>id</name>
        <briefdescription>
<para>Get the id of this session. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ReactorServer.hpp" line="52" column="20" bodyfile="/home/mike/git/letstalk/src/ReactorServer.hpp" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1ReactorServer_1_1Session_1a1f9c73861e4b31a73211a444fe1aef49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>lt::ReactorServer&lt; Req, Rep, P &gt;::Session::~Session</definition>
        <argsstring>()</argsstring>
        <name>~Session</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ReactorServer.hpp" line="54" column="9" bodyfile="/home/mike/git/letstalk/src/ReactorServerImpl.hpp" bodystart="258" bodyend="261"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classlt_1_1ReactorServer_1_1Session_1a1b5962ebd4dac0ccccf3e4d939860628" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>lt::ReactorServer&lt; Req, Rep, P &gt;::Session::Session</definition>
        <argsstring>(std::shared_ptr&lt; Backend &gt; i_reactor, Req const &amp;i_request, Guid i_id)</argsstring>
        <name>Session</name>
        <param>
          <type>std::shared_ptr&lt; Backend &gt;</type>
          <declname>i_reactor</declname>
        </param>
        <param>
          <type>Req const &amp;</type>
          <declname>i_request</declname>
        </param>
        <param>
          <type><ref refid="structlt_1_1Guid" kindref="compound">Guid</ref></type>
          <declname>i_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ReactorServer.hpp" line="59" column="9" bodyfile="/home/mike/git/letstalk/src/ReactorServerImpl.hpp" bodystart="248" bodyend="255"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Each request starts a session, modeled by an instance of this class. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>lt::Guid</label>
        <link refid="structlt_1_1Guid"/>
      </node>
      <node id="1">
        <label>lt::ReactorServer&lt; Req, Rep, ProgressData &gt;::Session</label>
        <link refid="classlt_1_1ReactorServer_1_1Session"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_id</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/mike/git/letstalk/src/ReactorServer.hpp" line="24" column="5" bodyfile="/home/mike/git/letstalk/src/ReactorServer.hpp" bodystart="24" bodyend="64"/>
    <listofallmembers>
      <member refid="classlt_1_1ReactorServer_1_1Session_1a88ab73dbc095f968fbfc05d27a445a2f" prot="protected" virt="non-virtual"><scope>lt::ReactorServer::Session</scope><name>Backend</name></member>
      <member refid="classlt_1_1ReactorServer_1_1Session_1a95250944b2a1fd51c4d41ba7414d42bc" prot="public" virt="non-virtual"><scope>lt::ReactorServer::Session</scope><name>fail</name></member>
      <member refid="classlt_1_1ReactorServer_1_1Session_1a0eb973751cc906b878685e4c7a92f4b0" prot="public" virt="non-virtual"><scope>lt::ReactorServer::Session</scope><name>id</name></member>
      <member refid="classlt_1_1ReactorServer_1_1Session_1a18562c2b4ad078253807f08bb17af9cd" prot="public" virt="non-virtual"><scope>lt::ReactorServer::Session</scope><name>isAlive</name></member>
      <member refid="classlt_1_1ReactorServer_1_1Session_1a4918229d6b17fcfd20313daa008ecc9a" prot="protected" virt="non-virtual"><scope>lt::ReactorServer::Session</scope><name>m_id</name></member>
      <member refid="classlt_1_1ReactorServer_1_1Session_1a11a2b26c2cc4185188f1cee239b39779" prot="protected" virt="non-virtual"><scope>lt::ReactorServer::Session</scope><name>m_reactor</name></member>
      <member refid="classlt_1_1ReactorServer_1_1Session_1a459846eff5d2a92355c2c19cebe27a4f" prot="protected" virt="non-virtual"><scope>lt::ReactorServer::Session</scope><name>m_request</name></member>
      <member refid="classlt_1_1ReactorServer_1_1Session_1aab7a8fb6e60d5d3928a39b10eb1c6489" prot="public" virt="non-virtual"><scope>lt::ReactorServer::Session</scope><name>progress</name></member>
      <member refid="classlt_1_1ReactorServer_1_1Session_1ac656a4fa279048808471e02fbedf81f4" prot="public" virt="non-virtual"><scope>lt::ReactorServer::Session</scope><name>progress</name></member>
      <member refid="classlt_1_1ReactorServer_1_1Session_1aeb54854aadc43cb2a41073209e23f50c" prot="public" virt="non-virtual"><scope>lt::ReactorServer::Session</scope><name>reply</name></member>
      <member refid="classlt_1_1ReactorServer_1_1Session_1ab9b04997dc12acf76ab9421ef7c681a6" prot="public" virt="non-virtual"><scope>lt::ReactorServer::Session</scope><name>request</name></member>
      <member refid="classlt_1_1ReactorServer_1_1Session_1a1b5962ebd4dac0ccccf3e4d939860628" prot="protected" virt="non-virtual"><scope>lt::ReactorServer::Session</scope><name>Session</name></member>
      <member refid="classlt_1_1ReactorServer_1_1Session_1a1f9c73861e4b31a73211a444fe1aef49" prot="public" virt="non-virtual"><scope>lt::ReactorServer::Session</scope><name>~Session</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classlt_1_1Participant" kind="class" language="C++" prot="public">
    <compoundname>lt::Participant</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; Participant &gt;</basecompoundref>
    <includes refid="Participant_8hpp" local="no">Participant.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classlt_1_1Participant_1af6d0b669ba2496c037fd88f53d0432d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class detail::ReaderListener</definition>
        <argsstring></argsstring>
        <name>detail::ReaderListener</name>
        <param>
          <type>detail::ReaderListener</type>
        </param>
        <briefdescription>
<para>Reader callbacks use this templated class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="239" column="5" bodyfile="/home/mike/git/letstalk/src/Participant.hpp" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classlt_1_1Participant_1a9544c98126549cae8f3a5cd9af6bcfdd" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Publisher</definition>
        <argsstring></argsstring>
        <name>Publisher</name>
        <param>
          <type><ref refid="classlt_1_1Publisher" kindref="compound">Publisher</ref></type>
        </param>
        <briefdescription>
<para>The publisher has a private ctor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="242" column="5" bodyfile="/home/mike/git/letstalk/src/Participant.hpp" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classlt_1_1Participant_1ac3896366113c33e33f5c76d69cbed577" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Req</type>
          </param>
          <param>
            <type>class Rep</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class Requester</definition>
        <argsstring></argsstring>
        <name>Requester</name>
        <param>
          <type><ref refid="classlt_1_1Requester" kindref="compound">Requester</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="244" column="5" bodyfile="/home/mike/git/letstalk/src/Participant.hpp" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classlt_1_1Participant_1abd655ceb07588fda8e29557c1a434307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class detail::ParticipantLogger</definition>
        <argsstring></argsstring>
        <name>detail::ParticipantLogger</name>
        <param>
          <type>detail::ParticipantLogger</type>
        </param>
        <briefdescription>
<para>Allow the participant callbacks to update the count. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="247" column="5" bodyfile="/home/mike/git/letstalk/src/Participant.hpp" bodystart="247" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classlt_1_1Participant_1a21885f3591db3526f99e11b80b51e19a" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; efd::DomainParticipant &gt;</type>
        <definition>std::shared_ptr&lt;efd::DomainParticipant&gt; lt::Participant::m_participant</definition>
        <argsstring></argsstring>
        <name>m_participant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="249" column="21" bodyfile="/home/mike/git/letstalk/src/Participant.hpp" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlt_1_1Participant_1afad93f53687c1f4f7f13227ae1db2151" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; efd::Publisher &gt;</type>
        <definition>std::shared_ptr&lt;efd::Publisher&gt; lt::Participant::m_publisher</definition>
        <argsstring></argsstring>
        <name>m_publisher</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="250" column="21" bodyfile="/home/mike/git/letstalk/src/Participant.hpp" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlt_1_1Participant_1a52ca73b7ff0bbf4e1ab86173ba61f2e2" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; efd::Subscriber &gt;</type>
        <definition>std::shared_ptr&lt;efd::Subscriber&gt; lt::Participant::m_subscriber</definition>
        <argsstring></argsstring>
        <name>m_subscriber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="251" column="21" bodyfile="/home/mike/git/letstalk/src/Participant.hpp" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlt_1_1Participant_1afdd787d27c60cf61e47cfe43113f772a" prot="protected" static="no" mutable="yes">
        <type>std::mutex</type>
        <definition>std::mutex lt::Participant::m_countMutex</definition>
        <argsstring></argsstring>
        <name>m_countMutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="253" column="24" bodyfile="/home/mike/git/letstalk/src/Participant.hpp" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlt_1_1Participant_1ae419d1b6604d7efd37a561afea6bb3da" prot="protected" static="no" mutable="no">
        <type>std::map&lt; std::string, int &gt;</type>
        <definition>std::map&lt;std::string, int&gt; lt::Participant::m_subscriberCount</definition>
        <argsstring></argsstring>
        <name>m_subscriberCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="254" column="14" bodyfile="/home/mike/git/letstalk/src/Participant.hpp" bodystart="254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlt_1_1Participant_1a6948e198be2d7b4a4ddfe26539117a54" prot="protected" static="no" mutable="no">
        <type>std::map&lt; std::string, int &gt;</type>
        <definition>std::map&lt;std::string, int&gt; lt::Participant::m_publisherCount</definition>
        <argsstring></argsstring>
        <name>m_publisherCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="255" column="14" bodyfile="/home/mike/git/letstalk/src/Participant.hpp" bodystart="255" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classlt_1_1Participant_1a266f5f43e44e21fa68f9b7d83899c0e1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ParticipantPtr</type>
        <definition>ParticipantPtr lt::Participant::create</definition>
        <argsstring>(uint8_t i_domain=0, std::string const &amp;i_qosProfile=&quot;&quot;)</argsstring>
        <name>create</name>
        <param>
          <type>uint8_t</type>
          <declname>i_domain</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>i_qosProfile</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Makes a new <ref refid="classlt_1_1Participant" kindref="compound">Participant</ref>. (There is no public constructor) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i_domain</parametername>
</parameternamelist>
<parameterdescription>
<para>Domains are logically isolated pub/sub communities. Valid values are 0 to 232 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i_qosProfile</parametername>
</parameternamelist>
<parameterdescription>
<para>The name a of a settings &quot;QOS&quot; (Quality of Service) profile. Profiles are defined in XML.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the created participant </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="37" column="27" bodyfile="/home/mike/git/letstalk/src/Participant.cpp" bodystart="25" bodyend="103"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlt_1_1Participant_1a07c62fad74d68acdba1be448a7aeec28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>lt::Participant::~Participant</definition>
        <argsstring>()</argsstring>
        <name>~Participant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="38" column="5" bodyfile="/home/mike/git/letstalk/src/Participant.cpp" bodystart="105" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1Participant_1a6b93ed397c29b3b5cfb42707255ec66d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void lt::Participant::subscribe</definition>
        <argsstring>(std::string const &amp;i_topic, C i_callback, std::string const &amp;i_qosProfile=&quot;&quot;, int i_historyDepth=1)</argsstring>
        <name>subscribe</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>i_topic</declname>
        </param>
        <param>
          <type>C</type>
          <declname>i_callback</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>i_qosProfile</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>int</type>
          <declname>i_historyDepth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Register a callback on the named topic expecting type T. When data arrives, the callback will be called. </para>
        </briefdescription>
        <detaileddescription>
<para>Callbacks take the form <programlisting><codeline><highlight class="normal">void<sp/>my_callback(std::unique_ptr&lt;T&gt;<sp/>new_data);</highlight></codeline>
</programlisting> Note that data is provided as a unique_ptr.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i_topic</parametername>
</parameternamelist>
<parameterdescription>
<para>Topic name to subscribe to</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function or lambda.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i_qosProfile</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings profile</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i_historyDepth</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of historical messages to store </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="59" column="10" bodyfile="/home/mike/git/letstalk/src/ParticipantImpl.hpp" bodystart="24" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1Participant_1a630cfe645c6dee7e8b44c410f7d42b80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>QueuePtr&lt; T &gt;</type>
        <definition>QueuePtr&lt; T &gt; lt::Participant::subscribe</definition>
        <argsstring>(std::string const &amp;i_topic, std::string const &amp;i_qosProfile=&quot;&quot;, int i_historyDepth=8)</argsstring>
        <name>subscribe</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>i_topic</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>i_qosProfile</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>int</type>
          <declname>i_historyDepth</declname>
          <defval>8</defval>
        </param>
        <briefdescription>
<para>Obtain a pointer to a shared queue of provided data. Data will be placed in the queue, up to the history level, at which point the oldest sample will be discarded. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i_topic</parametername>
</parameternamelist>
<parameterdescription>
<para>Topic name to subscribe to</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i_qosProfile</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings profile</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i_historyDepth</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of historical messages to store</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>thread safe queue pointer where samples will appear </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="75" column="14" bodyfile="/home/mike/git/letstalk/src/ParticipantImpl.hpp" bodystart="35" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1Participant_1a919c1ddc1208c9a209c6630f1bdc18c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lt::Participant::unsubscribe</definition>
        <argsstring>(std::string const &amp;i_topic)</argsstring>
        <name>unsubscribe</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>i_topic</declname>
        </param>
        <briefdescription>
<para>Unsubscribe from the given topic. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i_topic</parametername>
</parameternamelist>
<parameterdescription>
<para>Topic to unsubscribe from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="82" column="10" bodyfile="/home/mike/git/letstalk/src/Participant.cpp" bodystart="176" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1Participant_1ad73d8f2561d6c2b679d402ac909c41fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classlt_1_1Publisher" kindref="compound">Publisher</ref></type>
        <definition>Publisher lt::Participant::advertise</definition>
        <argsstring>(std::string const &amp;i_topic, std::string const &amp;i_qosProfile=&quot;&quot;, int i_historyDepth=1)</argsstring>
        <name>advertise</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>i_topic</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>i_qosProfile</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>int</type>
          <declname>i_historyDepth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Get a <ref refid="classlt_1_1Publisher" kindref="compound">Publisher</ref> object you can use to send messages of type T on the topic. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i_topic</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the topic</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i_qosProfile</parametername>
</parameternamelist>
<parameterdescription>
<para>Settings profile</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>lightweight publisher object. Note that the publish() calls will fail if the supplied data isn&apos;t of type T</para>
</simplesect>
Note: <ref refid="classlt_1_1Publisher" kindref="compound">Publisher</ref> is a lightweight class that is cheap to copy. It&apos;s primary API call is <programlisting><codeline><highlight class="normal">bool<sp/>publish(std::unique_ptr&lt;T&gt;<sp/>i_data);</highlight></codeline>
</programlisting> which returns true if the data was sent successfully. Publishers do not have an explicit <ref refid="classlt_1_1Participant_1ad89e591e3f546a1610e3d6b6b73fabb5" kindref="member">unadvertise()</ref> method. If the last publisher referring to i_topic goes out of scope, the publication will automatically be reported as terminated by the library. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="105" column="15" bodyfile="/home/mike/git/letstalk/src/ParticipantImpl.hpp" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1Participant_1a73f683deb5bbc57ce3834a0f2694433c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Req</type>
          </param>
          <param>
            <type>class Rep</type>
          </param>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void lt::Participant::advertise</definition>
        <argsstring>(std::string const &amp;i_serviceName, C i_serviceProvider)</argsstring>
        <name>advertise</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>i_serviceName</declname>
        </param>
        <param>
          <type>C</type>
          <declname>i_serviceProvider</declname>
        </param>
        <briefdescription>
<para>Advertise a new request/reply service. </para>
        </briefdescription>
        <detaileddescription>
<para>This will create a new work thread and call i_serviceProvider on each recieved Req to produce a Rep, then publish the Rep. If i_serviceProvider throws an exception, this failure will be communicated back to the requester.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i_serviceName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the service for determining the related topics</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i_serviceProvider</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object with a call of the form <computeroutput>Rep = C(Req)</computeroutput> This object may throw exceptions if Rep cannot be computed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="120" column="10" bodyfile="/home/mike/git/letstalk/src/ParticipantImpl.hpp" bodystart="85" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1Participant_1ad89e591e3f546a1610e3d6b6b73fabb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lt::Participant::unadvertise</definition>
        <argsstring>(std::string const &amp;i_service)</argsstring>
        <name>unadvertise</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>i_service</declname>
        </param>
        <briefdescription>
<para>Stop providing the named service. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i_service</parametername>
</parameternamelist>
<parameterdescription>
<para>Service to discontinue </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="127" column="10" bodyfile="/home/mike/git/letstalk/src/Participant.cpp" bodystart="188" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1Participant_1a798f568a7141b68812ccf67990c74d3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Req</type>
          </param>
          <param>
            <type>class Rep</type>
          </param>
        </templateparamlist>
        <type><ref refid="classlt_1_1Requester" kindref="compound">Requester</ref>&lt; Req, Rep &gt;</type>
        <definition>Requester&lt; Req, Rep &gt; lt::Participant::makeRequester</definition>
        <argsstring>(std::string const &amp;i_serviceName)</argsstring>
        <name>makeRequester</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>i_serviceName</declname>
        </param>
        <briefdescription>
<para>Build a requester object for making requests to a service. </para>
        </briefdescription>
        <detaileddescription>
<para>Each request is an object of type Req and will correspond to one response object of type std::promise&lt;Rep&gt;.</para>
<para>Typically, this will look like <programlisting><codeline><highlight class="normal">auto<sp/>requester<sp/>=<sp/>participant-&gt;request&lt;Location,Temperature&gt;(&quot;weatherService&quot;);</highlight></codeline>
<codeline><highlight class="normal">Location<sp/>location(41.0,<sp/>70.0);</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>temp<sp/>=<sp/>requester.request(location).get();</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i_serviceName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the service for determining the related topics</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a lightweight <ref refid="classlt_1_1Requester" kindref="compound">Requester</ref> object that can be used to send requests. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="149" column="15" bodyfile="/home/mike/git/letstalk/src/ParticipantImpl.hpp" bodystart="95" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1Participant_1a40b328a0429210a22782e78996784347" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Req</type>
          </param>
          <param>
            <type>class Rep</type>
          </param>
          <param>
            <type>class P</type>
            <defval>reactor_void_progress</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classlt_1_1ReactorServer" kindref="compound">ReactorServer</ref>&lt; Req, Rep, P &gt;</type>
        <definition>ReactorServer&lt; Req, Rep, P &gt; lt::Participant::makeReactorServer</definition>
        <argsstring>(std::string const &amp;i_serviceName)</argsstring>
        <name>makeReactorServer</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>i_serviceName</declname>
        </param>
        <briefdescription>
<para>Make a reactor server object. This is a lightweight object that may be cheaply copied. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="classlt_1_1ReactorServer" kindref="compound">ReactorServer</ref> handles the server-side of the reactor pattern. This is a pull-style API, where you are responsible for polling the server&apos;s methods looking for new sessions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i_serviceName</parametername>
</parameternamelist>
<parameterdescription>
<para>Used to calculate all of the related topics </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlt_1_1ReactorServer" kindref="compound">ReactorServer</ref> instance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="162" column="19" bodyfile="/home/mike/git/letstalk/src/ParticipantImpl.hpp" bodystart="104" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1Participant_1a730ed9f2cd7bf929767485b419932fa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Req</type>
          </param>
          <param>
            <type>class Rep</type>
          </param>
          <param>
            <type>class P</type>
            <defval>reactor_void_progress</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classlt_1_1ReactorClient" kindref="compound">ReactorClient</ref>&lt; Req, Rep, P &gt;</type>
        <definition>ReactorClient&lt; Req, Rep, P &gt; lt::Participant::makeReactorClient</definition>
        <argsstring>(std::string const &amp;i_serviceName)</argsstring>
        <name>makeReactorClient</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>i_serviceName</declname>
        </param>
        <briefdescription>
<para>Make a reactor client object. This is a lightweight object that may be cheaply copied. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="classlt_1_1ReactorClient" kindref="compound">ReactorClient</ref> controls the client side of a reactor. It can start multiple sessions, possibly active simultaneously.</para>
<para>The workflow is<orderedlist>
<listitem><para>Send a request, starting a new session.</para>
</listitem><listitem><para>Use the session object to check on progress.</para>
</listitem><listitem><para>Get the reply, waiting as necessary.</para>
</listitem></orderedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i_serviceName</parametername>
</parameternamelist>
<parameterdescription>
<para>Used to calculate all of the related topics </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlt_1_1ReactorClient" kindref="compound">ReactorClient</ref> instance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="180" column="19" bodyfile="/home/mike/git/letstalk/src/ParticipantImpl.hpp" bodystart="111" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1Participant_1abcccccd13c198e53390a15e05b7b469e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lt::Participant::publisherCount</definition>
        <argsstring>(std::string const &amp;i_topic) const</argsstring>
        <name>publisherCount</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>i_topic</declname>
        </param>
        <briefdescription>
<para>Obtain the current known number of publishers on a given topic. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i_topic</parametername>
</parameternamelist>
<parameterdescription>
<para>Topic to query</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of known publishers on i_topic (excluding this participant) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="189" column="9" bodyfile="/home/mike/git/letstalk/src/Participant.cpp" bodystart="225" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1Participant_1ab68586bb5172b6b01684f542fdd77e7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lt::Participant::subscriberCount</definition>
        <argsstring>(std::string const &amp;i_topic) const</argsstring>
        <name>subscriberCount</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>i_topic</declname>
        </param>
        <briefdescription>
<para>Obtain the current known number of subscribers on a given topic. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i_topic</parametername>
</parameternamelist>
<parameterdescription>
<para>Topic to query</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of known subscribers on i_topic (excluding this participant) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="198" column="9" bodyfile="/home/mike/git/letstalk/src/Participant.cpp" bodystart="237" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1Participant_1a28d649a3c7938374e0f0f1949885ff19" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string lt::Participant::topicType</definition>
        <argsstring>(std::string const &amp;i_topic) const</argsstring>
        <name>topicType</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>i_topic</declname>
        </param>
        <briefdescription>
<para>Get the name (demangled) of the type in use on a given topic. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i_topic</parametername>
</parameternamelist>
<parameterdescription>
<para>Topic to query</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Name of the type in use in i_topic </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="207" column="17" bodyfile="/home/mike/git/letstalk/src/Participant.cpp" bodystart="253" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1Participant_1a75c9fb38a78a6fe42b2d80cf4c910331" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string lt::Participant::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <briefdescription>
<para>Get the name of the participant. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Name of the participant </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="214" column="17" bodyfile="/home/mike/git/letstalk/src/Participant.cpp" bodystart="112" bodyend="115"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classlt_1_1Participant_1af0e8ee785cce7cb9399ea395beb29c22" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>efd::Topic *</type>
        <definition>efd::Topic * lt::Participant::getTopic</definition>
        <argsstring>(std::string const &amp;i_topic, efd::TypeSupport const &amp;i_type, int i_historyDepth=1)</argsstring>
        <name>getTopic</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>i_topic</declname>
        </param>
        <param>
          <type>efd::TypeSupport const &amp;</type>
          <declname>i_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i_historyDepth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Get a pointer to an existing topic, or create a new topic (registering i_type) and return a pointer to that. If a topic exists using a different type, it will be deleted, and a new topic created for the new (topic, type) pair. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="220" column="16" bodyfile="/home/mike/git/letstalk/src/Participant.cpp" bodystart="262" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1Participant_1a09e81975e4df04d129c2b7f84ea36309" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lt::Participant::registerType</definition>
        <argsstring>(efd::TypeSupport const &amp;i_type)</argsstring>
        <name>registerType</name>
        <param>
          <type>efd::TypeSupport const &amp;</type>
          <declname>i_type</declname>
        </param>
        <briefdescription>
<para>Register the serialize/deserialize support with the participant. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="223" column="10" bodyfile="/home/mike/git/letstalk/src/Participant.cpp" bodystart="248" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1Participant_1a3dcd9a92e2f4cee0f4dc3a0585f4d829" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlt_1_1Publisher" kindref="compound">Publisher</ref></type>
        <definition>Publisher lt::Participant::doAdvertise</definition>
        <argsstring>(std::string const &amp;i_topic, efd::TypeSupport const &amp;i_type, std::string const &amp;i_qosProfile, int i_historyDepth)</argsstring>
        <name>doAdvertise</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>i_topic</declname>
        </param>
        <param>
          <type>efd::TypeSupport const &amp;</type>
          <declname>i_type</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>i_qosProfile</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i_historyDepth</declname>
        </param>
        <briefdescription>
<para>Type-erased advertise function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="226" column="15" bodyfile="/home/mike/git/letstalk/src/Participant.cpp" bodystart="117" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1Participant_1a59eab541fa6944e560b65f29102642f2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lt::Participant::doSubscribe</definition>
        <argsstring>(std::string const &amp;i_topic, efd::TypeSupport const &amp;i_typeName, efd::DataReaderListener *i_listener, std::string const &amp;i_qosProfile, int i_historyDepth)</argsstring>
        <name>doSubscribe</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>i_topic</declname>
        </param>
        <param>
          <type>efd::TypeSupport const &amp;</type>
          <declname>i_typeName</declname>
        </param>
        <param>
          <type>efd::DataReaderListener *</type>
          <declname>i_listener</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>i_qosProfile</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i_historyDepth</declname>
        </param>
        <briefdescription>
<para>Type-erased subscribe function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="230" column="10" bodyfile="/home/mike/git/letstalk/src/Participant.cpp" bodystart="141" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1Participant_1aa0e7c1b2bf28e42b7bc9d5cbc8833ece" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lt::Participant::updatePublisherCount</definition>
        <argsstring>(std::string const &amp;i_topic, int i_update)</argsstring>
        <name>updatePublisherCount</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>i_topic</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i_update</declname>
        </param>
        <briefdescription>
<para>Callback for updating the pub/sub counts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="234" column="10" bodyfile="/home/mike/git/letstalk/src/Participant.cpp" bodystart="201" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1Participant_1ace927a05b1b6caf39a7374f965203cdc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lt::Participant::updateSubscriberCount</definition>
        <argsstring>(std::string const &amp;i_topic, int i_update)</argsstring>
        <name>updateSubscriberCount</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>i_topic</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i_update</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/Participant.hpp" line="235" column="10" bodyfile="/home/mike/git/letstalk/src/Participant.cpp" bodystart="213" bodyend="222"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Allows participating in DDS communication. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classlt_1_1Participant" kindref="compound">Participant</ref> is a node in the pub/sub network. It is responsible for discovering other nodes, running callbacks on message reciept and handling the business of socket management.</para>
<para>Participants are handled as shared pointers. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>std::enable_shared_from_this&lt; Participant &gt;</label>
      </node>
      <node id="1">
        <label>lt::Participant</label>
        <link refid="classlt_1_1Participant"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>std::enable_shared_from_this&lt; Participant &gt;</label>
      </node>
      <node id="1">
        <label>lt::Participant</label>
        <link refid="classlt_1_1Participant"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/mike/git/letstalk/src/Participant.hpp" line="24" column="1" bodyfile="/home/mike/git/letstalk/src/Participant.hpp" bodystart="24" bodyend="256"/>
    <listofallmembers>
      <member refid="classlt_1_1Participant_1ad73d8f2561d6c2b679d402ac909c41fe" prot="public" virt="non-virtual"><scope>lt::Participant</scope><name>advertise</name></member>
      <member refid="classlt_1_1Participant_1a73f683deb5bbc57ce3834a0f2694433c" prot="public" virt="non-virtual"><scope>lt::Participant</scope><name>advertise</name></member>
      <member refid="classlt_1_1Participant_1a266f5f43e44e21fa68f9b7d83899c0e1" prot="public" virt="non-virtual"><scope>lt::Participant</scope><name>create</name></member>
      <member refid="classlt_1_1Participant_1abd655ceb07588fda8e29557c1a434307" prot="public" virt="non-virtual"><scope>lt::Participant</scope><name>detail::ParticipantLogger</name></member>
      <member refid="classlt_1_1Participant_1af6d0b669ba2496c037fd88f53d0432d9" prot="public" virt="non-virtual"><scope>lt::Participant</scope><name>detail::ReaderListener</name></member>
      <member refid="classlt_1_1Participant_1a3dcd9a92e2f4cee0f4dc3a0585f4d829" prot="protected" virt="non-virtual"><scope>lt::Participant</scope><name>doAdvertise</name></member>
      <member refid="classlt_1_1Participant_1a59eab541fa6944e560b65f29102642f2" prot="protected" virt="non-virtual"><scope>lt::Participant</scope><name>doSubscribe</name></member>
      <member refid="classlt_1_1Participant_1af0e8ee785cce7cb9399ea395beb29c22" prot="protected" virt="non-virtual"><scope>lt::Participant</scope><name>getTopic</name></member>
      <member refid="classlt_1_1Participant_1afdd787d27c60cf61e47cfe43113f772a" prot="protected" virt="non-virtual"><scope>lt::Participant</scope><name>m_countMutex</name></member>
      <member refid="classlt_1_1Participant_1a21885f3591db3526f99e11b80b51e19a" prot="protected" virt="non-virtual"><scope>lt::Participant</scope><name>m_participant</name></member>
      <member refid="classlt_1_1Participant_1afad93f53687c1f4f7f13227ae1db2151" prot="protected" virt="non-virtual"><scope>lt::Participant</scope><name>m_publisher</name></member>
      <member refid="classlt_1_1Participant_1a6948e198be2d7b4a4ddfe26539117a54" prot="protected" virt="non-virtual"><scope>lt::Participant</scope><name>m_publisherCount</name></member>
      <member refid="classlt_1_1Participant_1a52ca73b7ff0bbf4e1ab86173ba61f2e2" prot="protected" virt="non-virtual"><scope>lt::Participant</scope><name>m_subscriber</name></member>
      <member refid="classlt_1_1Participant_1ae419d1b6604d7efd37a561afea6bb3da" prot="protected" virt="non-virtual"><scope>lt::Participant</scope><name>m_subscriberCount</name></member>
      <member refid="classlt_1_1Participant_1a730ed9f2cd7bf929767485b419932fa1" prot="public" virt="non-virtual"><scope>lt::Participant</scope><name>makeReactorClient</name></member>
      <member refid="classlt_1_1Participant_1a40b328a0429210a22782e78996784347" prot="public" virt="non-virtual"><scope>lt::Participant</scope><name>makeReactorServer</name></member>
      <member refid="classlt_1_1Participant_1a798f568a7141b68812ccf67990c74d3f" prot="public" virt="non-virtual"><scope>lt::Participant</scope><name>makeRequester</name></member>
      <member refid="classlt_1_1Participant_1a75c9fb38a78a6fe42b2d80cf4c910331" prot="public" virt="non-virtual"><scope>lt::Participant</scope><name>name</name></member>
      <member refid="classlt_1_1Participant_1a9544c98126549cae8f3a5cd9af6bcfdd" prot="protected" virt="non-virtual"><scope>lt::Participant</scope><name>Publisher</name></member>
      <member refid="classlt_1_1Participant_1abcccccd13c198e53390a15e05b7b469e" prot="public" virt="non-virtual"><scope>lt::Participant</scope><name>publisherCount</name></member>
      <member refid="classlt_1_1Participant_1a09e81975e4df04d129c2b7f84ea36309" prot="protected" virt="non-virtual"><scope>lt::Participant</scope><name>registerType</name></member>
      <member refid="classlt_1_1Participant_1ac3896366113c33e33f5c76d69cbed577" prot="protected" virt="non-virtual"><scope>lt::Participant</scope><name>Requester</name></member>
      <member refid="classlt_1_1Participant_1a6b93ed397c29b3b5cfb42707255ec66d" prot="public" virt="non-virtual"><scope>lt::Participant</scope><name>subscribe</name></member>
      <member refid="classlt_1_1Participant_1a630cfe645c6dee7e8b44c410f7d42b80" prot="public" virt="non-virtual"><scope>lt::Participant</scope><name>subscribe</name></member>
      <member refid="classlt_1_1Participant_1ab68586bb5172b6b01684f542fdd77e7f" prot="public" virt="non-virtual"><scope>lt::Participant</scope><name>subscriberCount</name></member>
      <member refid="classlt_1_1Participant_1a28d649a3c7938374e0f0f1949885ff19" prot="public" virt="non-virtual"><scope>lt::Participant</scope><name>topicType</name></member>
      <member refid="classlt_1_1Participant_1ad89e591e3f546a1610e3d6b6b73fabb5" prot="public" virt="non-virtual"><scope>lt::Participant</scope><name>unadvertise</name></member>
      <member refid="classlt_1_1Participant_1a919c1ddc1208c9a209c6630f1bdc18c9" prot="public" virt="non-virtual"><scope>lt::Participant</scope><name>unsubscribe</name></member>
      <member refid="classlt_1_1Participant_1aa0e7c1b2bf28e42b7bc9d5cbc8833ece" prot="protected" virt="non-virtual"><scope>lt::Participant</scope><name>updatePublisherCount</name></member>
      <member refid="classlt_1_1Participant_1ace927a05b1b6caf39a7374f965203cdc" prot="protected" virt="non-virtual"><scope>lt::Participant</scope><name>updateSubscriberCount</name></member>
      <member refid="classlt_1_1Participant_1a07c62fad74d68acdba1be448a7aeec28" prot="public" virt="non-virtual"><scope>lt::Participant</scope><name>~Participant</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classlt_1_1QueueWaitset" kind="class" language="C++" prot="public">
    <compoundname>lt::QueueWaitset</compoundname>
    <includes refid="QueueWaitset_8hpp" local="no">QueueWaitset.hpp</includes>
    <innerclass refid="structlt_1_1QueueWaitset_1_1AttachFunctor" prot="protected">lt::QueueWaitset::AttachFunctor</innerclass>
    <innerclass refid="structlt_1_1QueueWaitset_1_1CheckMailFunctor" prot="protected">lt::QueueWaitset::CheckMailFunctor</innerclass>
    <innerclass refid="structlt_1_1QueueWaitset_1_1DetachFunctor" prot="protected">lt::QueueWaitset::DetachFunctor</innerclass>
    <templateparamlist>
      <param>
        <type>class...</type>
        <declname>Ts</declname>
        <defname>Ts</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classlt_1_1QueueWaitset_1abbcc9d392f93496e0e9fd567d455cab0" prot="public" static="no">
        <type>std::tuple&lt; QueuePtr&lt; Ts &gt;... &gt;</type>
        <definition>using lt::QueueWaitset&lt; Ts &gt;::QueueTuple =  std::tuple&lt;QueuePtr&lt;Ts&gt;...&gt;</definition>
        <argsstring></argsstring>
        <name>QueueTuple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/QueueWaitset.hpp" line="21" column="5" bodyfile="/home/mike/git/letstalk/src/QueueWaitset.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classlt_1_1QueueWaitset_1a3ae89af075c352794399239c8b01089e" prot="protected" static="no" mutable="no">
        <type>QueueTuple</type>
        <definition>QueueTuple lt::QueueWaitset&lt; Ts &gt;::m_queue</definition>
        <argsstring></argsstring>
        <name>m_queue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/QueueWaitset.hpp" line="116" column="16" bodyfile="/home/mike/git/letstalk/src/QueueWaitset.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlt_1_1QueueWaitset_1a7ac37f49418836385eebfeb2d7fbdb79" prot="protected" static="no" mutable="yes">
        <type>std::mutex</type>
        <definition>std::mutex lt::QueueWaitset&lt; Ts &gt;::m_mutex</definition>
        <argsstring></argsstring>
        <name>m_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/QueueWaitset.hpp" line="117" column="24" bodyfile="/home/mike/git/letstalk/src/QueueWaitset.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlt_1_1QueueWaitset_1a44e03c11bab5a3c1640bf48b624ddb12" prot="protected" static="no" mutable="no">
        <type>std::condition_variable</type>
        <definition>std::condition_variable lt::QueueWaitset&lt; Ts &gt;::m_waitset</definition>
        <argsstring></argsstring>
        <name>m_waitset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/QueueWaitset.hpp" line="118" column="29" bodyfile="/home/mike/git/letstalk/src/QueueWaitset.hpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlt_1_1QueueWaitset_1ac50afa352b4b8bc37b5a41259160af3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lt::QueueWaitset&lt; Ts &gt;::QueueWaitset</definition>
        <argsstring>(QueueTuple const &amp;i_queue)</argsstring>
        <name>QueueWaitset</name>
        <param>
          <type>QueueTuple const &amp;</type>
          <declname>i_queue</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacelt_1a5f18cbd891c604c0531c6c3a06e5c914" kindref="member">makeQueueWaitset()</ref> for a convenient builder. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the call should look like</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>node<sp/>=<sp/><ref refid="classlt_1_1Participant_1a266f5f43e44e21fa68f9b7d83899c0e1" kindref="member">lt::Participant::create</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type1Sub<sp/>=<sp/>node-&gt;subscribe&lt;MyType1&gt;(</highlight><highlight class="stringliteral">&quot;topic1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type2Sub<sp/>=<sp/>node-&gt;subscribe&lt;MyType2&gt;(</highlight><highlight class="stringliteral">&quot;topic2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">QueueWaitset&lt;MyType1,<sp/>MyType2&gt;<sp/>waitset({type1Sub,<sp/>type2Sub});</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/QueueWaitset.hpp" line="37" column="5" bodyfile="/home/mike/git/letstalk/src/QueueWaitset.hpp" bodystart="37" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1QueueWaitset_1a50b262ef20d17b78e092817bdedc8a1e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lt::QueueWaitset&lt; Ts &gt;::~QueueWaitset</definition>
        <argsstring>()</argsstring>
        <name>~QueueWaitset</name>
        <briefdescription>
<para>Detach from all queues. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/QueueWaitset.hpp" line="44" column="5" bodyfile="/home/mike/git/letstalk/src/QueueWaitset.hpp" bodystart="44" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1QueueWaitset_1af3c58b7f3966d97e1d8985a1693f1b54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int lt::QueueWaitset&lt; Ts &gt;::wait</definition>
        <argsstring>(std::chrono::milliseconds i_timeout=std::chrono::hours(72))</argsstring>
        <name>wait</name>
        <param>
          <type>std::chrono::milliseconds</type>
          <declname>i_timeout</declname>
          <defval>std::chrono::hours(72)</defval>
        </param>
        <briefdescription>
<para>Wait for messages in one of the queues. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i_timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum wait duration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index in tuple of queue with data or -1 on timeout</para>
</simplesect>
Waits for one of the attached queues to have data. Note that if there are multiple consumers, the wakeup may be spurious <ndash/> none of the queues may actually have data. The returned value is always the lowest numbered queue with data. Higher numbered queues may also have data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/QueueWaitset.hpp" line="61" column="9" bodyfile="/home/mike/git/letstalk/src/QueueWaitset.hpp" bodystart="61" bodyend="76"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Wait for any attached <ref refid="classlt_1_1ThreadSafeQueue" kindref="compound">ThreadSafeQueue</ref> to have messages. </para>
    </briefdescription>
    <detaileddescription>
<para>This is an efficient way of having one consumer thread wait on multiple producers coming from subscriptions. </para>
    </detaileddescription>
    <location file="/home/mike/git/letstalk/src/QueueWaitset.hpp" line="19" column="1" bodyfile="/home/mike/git/letstalk/src/QueueWaitset.hpp" bodystart="19" bodyend="119"/>
    <listofallmembers>
      <member refid="classlt_1_1QueueWaitset_1a7ac37f49418836385eebfeb2d7fbdb79" prot="protected" virt="non-virtual"><scope>lt::QueueWaitset</scope><name>m_mutex</name></member>
      <member refid="classlt_1_1QueueWaitset_1a3ae89af075c352794399239c8b01089e" prot="protected" virt="non-virtual"><scope>lt::QueueWaitset</scope><name>m_queue</name></member>
      <member refid="classlt_1_1QueueWaitset_1a44e03c11bab5a3c1640bf48b624ddb12" prot="protected" virt="non-virtual"><scope>lt::QueueWaitset</scope><name>m_waitset</name></member>
      <member refid="classlt_1_1QueueWaitset_1abbcc9d392f93496e0e9fd567d455cab0" prot="public" virt="non-virtual"><scope>lt::QueueWaitset</scope><name>QueueTuple</name></member>
      <member refid="classlt_1_1QueueWaitset_1ac50afa352b4b8bc37b5a41259160af3c" prot="public" virt="non-virtual"><scope>lt::QueueWaitset</scope><name>QueueWaitset</name></member>
      <member refid="classlt_1_1QueueWaitset_1af3c58b7f3966d97e1d8985a1693f1b54" prot="public" virt="non-virtual"><scope>lt::QueueWaitset</scope><name>wait</name></member>
      <member refid="classlt_1_1QueueWaitset_1a50b262ef20d17b78e092817bdedc8a1e" prot="public" virt="non-virtual"><scope>lt::QueueWaitset</scope><name>~QueueWaitset</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

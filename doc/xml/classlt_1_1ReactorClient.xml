<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classlt_1_1ReactorClient" kind="class" language="C++" prot="public">
    <compoundname>lt::ReactorClient</compoundname>
    <includes refid="ReactorClient_8hpp" local="no">ReactorClient.hpp</includes>
    <innerclass refid="classlt_1_1ReactorClient_1_1Session" prot="public">lt::ReactorClient::Session</innerclass>
    <templateparamlist>
      <param>
        <type>class Req</type>
      </param>
      <param>
        <type>class Rep</type>
      </param>
      <param>
        <type>class ProgressData</type>
        <defval>reactor_void_progress</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classlt_1_1ReactorClient_1aa8939adc90988ac9df5dcbaba75af074" prot="private" static="no">
        <type>detail::ReactorClientBackend&lt; Req, Rep, ProgressData &gt;</type>
        <definition>using lt::ReactorClient&lt; Req, Rep, ProgressData &gt;::Backend =  detail::ReactorClientBackend&lt;Req, Rep, ProgressData&gt;</definition>
        <argsstring></argsstring>
        <name>Backend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ReactorClient.hpp" line="23" column="5" bodyfile="/home/mike/git/letstalk/src/ReactorClient.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classlt_1_1ReactorClient_1a1ee7e76afe0ca52b9d7dab8a171e8bfb" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Participant</definition>
        <argsstring></argsstring>
        <name>Participant</name>
        <param>
          <type><ref refid="classlt_1_1Participant" kindref="compound">Participant</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ReactorClient.hpp" line="86" column="5" bodyfile="/home/mike/git/letstalk/src/ReactorClient.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classlt_1_1ReactorClient_1ae246d03c18b26eba96d8637fb9ddf6bd" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; Backend &gt;</type>
        <definition>std::shared_ptr&lt;Backend&gt; lt::ReactorClient&lt; Req, Rep, ProgressData &gt;::m_backend</definition>
        <argsstring></argsstring>
        <name>m_backend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ReactorClient.hpp" line="89" column="21" bodyfile="/home/mike/git/letstalk/src/ReactorClient.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlt_1_1ReactorClient_1aa6aed86d5018d90994881440ce2373b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlt_1_1ReactorClient_1_1Session" kindref="compound">Session</ref></type>
        <definition>ReactorClient&lt; Req, Rep, ProgressData &gt;::Session lt::ReactorClient&lt; Req, Rep, ProgressData &gt;::request</definition>
        <argsstring>(Req const &amp;i_request)</argsstring>
        <name>request</name>
        <param>
          <type>Req const &amp;</type>
          <declname>i_request</declname>
        </param>
        <briefdescription>
<para>Make a request to the reactor service, starting a new session. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i_request</parametername>
</parameternamelist>
<parameterdescription>
<para>Request data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlt_1_1ReactorClient_1_1Session" kindref="compound">Session</ref> object used to interact with this session </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ReactorClient.hpp" line="77" column="13" bodyfile="/home/mike/git/letstalk/src/ReactorClientImpl.hpp" bodystart="219" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1ReactorClient_1a491da94156ce754baa9ef0afe9c03b22" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lt::ReactorClient&lt; Req, Rep, ProgressData &gt;::logConnectionStatus</definition>
        <argsstring>() const</argsstring>
        <name>logConnectionStatus</name>
        <briefdescription>
<para>Logs debug information about the connections if LT_VERBOSE is defined. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ReactorClient.hpp" line="80" column="10" bodyfile="/home/mike/git/letstalk/src/ReactorClientImpl.hpp" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1ReactorClient_1a51e82b450ce8e905bfd4d33766dba893" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lt::ReactorClient&lt; Req, Rep, ProgressData &gt;::discoveredServer</definition>
        <argsstring>() const</argsstring>
        <name>discoveredServer</name>
        <briefdescription>
<para>Check if there is a connection to the server. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ReactorClient.hpp" line="83" column="10" bodyfile="/home/mike/git/letstalk/src/ReactorClientImpl.hpp" bodystart="278" bodyend="281"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classlt_1_1ReactorClient_1a67c9c25947dde4060c4fd1da99a7b633" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>lt::ReactorClient&lt; Req, Rep, ProgressData &gt;::ReactorClient</definition>
        <argsstring>(std::shared_ptr&lt; Backend &gt; i_backend)</argsstring>
        <name>ReactorClient</name>
        <param>
          <type>std::shared_ptr&lt; Backend &gt;</type>
          <declname>i_backend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ReactorClient.hpp" line="87" column="5" bodyfile="/home/mike/git/letstalk/src/ReactorClientImpl.hpp" bodystart="214" bodyend="216"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Submit reactor requests and control reactor sessions. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classlt_1_1ReactorClient" kindref="compound">ReactorClient</ref> controls the client side of a reactor. It can start multiple sessions, possibly active simultaneously.</para>
<para>The workflow is<orderedlist>
<listitem><para>Send a request, starting a new session.</para>
</listitem><listitem><para>Use the session object to check on progress.</para>
</listitem><listitem><para>Get the reply, waiting as necessary. </para>
</listitem></orderedlist>
</para>
    </detaileddescription>
    <location file="/home/mike/git/letstalk/src/ReactorClient.hpp" line="22" column="1" bodyfile="/home/mike/git/letstalk/src/ReactorClient.hpp" bodystart="22" bodyend="90"/>
    <listofallmembers>
      <member refid="classlt_1_1ReactorClient_1aa8939adc90988ac9df5dcbaba75af074" prot="private" virt="non-virtual"><scope>lt::ReactorClient</scope><name>Backend</name></member>
      <member refid="classlt_1_1ReactorClient_1a51e82b450ce8e905bfd4d33766dba893" prot="public" virt="non-virtual"><scope>lt::ReactorClient</scope><name>discoveredServer</name></member>
      <member refid="classlt_1_1ReactorClient_1a491da94156ce754baa9ef0afe9c03b22" prot="public" virt="non-virtual"><scope>lt::ReactorClient</scope><name>logConnectionStatus</name></member>
      <member refid="classlt_1_1ReactorClient_1ae246d03c18b26eba96d8637fb9ddf6bd" prot="protected" virt="non-virtual"><scope>lt::ReactorClient</scope><name>m_backend</name></member>
      <member refid="classlt_1_1ReactorClient_1a1ee7e76afe0ca52b9d7dab8a171e8bfb" prot="protected" virt="non-virtual"><scope>lt::ReactorClient</scope><name>Participant</name></member>
      <member refid="classlt_1_1ReactorClient_1a67c9c25947dde4060c4fd1da99a7b633" prot="protected" virt="non-virtual"><scope>lt::ReactorClient</scope><name>ReactorClient</name></member>
      <member refid="classlt_1_1ReactorClient_1aa6aed86d5018d90994881440ce2373b9" prot="public" virt="non-virtual"><scope>lt::ReactorClient</scope><name>request</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

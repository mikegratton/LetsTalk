<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="ThreadSafeQueue_8hpp" kind="file" language="C++">
    <compoundname>ThreadSafeQueue.hpp</compoundname>
    <includes local="no">condition_variable</includes>
    <includes local="no">deque</includes>
    <includes local="no">memory</includes>
    <includes local="no">mutex</includes>
    <includedby refid="Participant_8hpp" local="yes">/home/mike/git/letstalk/src/Participant.hpp</includedby>
    <includedby refid="QueueWaitset_8hpp" local="yes">/home/mike/git/letstalk/src/QueueWaitset.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>/home/mike/git/letstalk/src/ThreadSafeQueue.hpp</label>
        <link refid="ThreadSafeQueue_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>condition_variable</label>
      </node>
      <node id="3">
        <label>deque</label>
      </node>
      <node id="5">
        <label>mutex</label>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5">
        <label>/home/mike/git/letstalk/src/ReaderListenerImpl.hpp</label>
        <link refid="ReaderListenerImpl_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/mike/git/letstalk/src/LetsTalk.hpp</label>
        <link refid="LetsTalk_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/mike/git/letstalk/src/ThreadSafeQueue.hpp</label>
        <link refid="ThreadSafeQueue_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/home/mike/git/letstalk/src/QueueWaitset.hpp</label>
        <link refid="QueueWaitset_8hpp_source"/>
      </node>
      <node id="4">
        <label>/home/mike/git/letstalk/src/ParticipantImpl.hpp</label>
        <link refid="ParticipantImpl_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/mike/git/letstalk/src/Participant.hpp</label>
        <link refid="Participant_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/mike/git/letstalk/src/RequestReplyImpl.hpp</label>
        <link refid="RequestReplyImpl_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classlt_1_1ThreadSafeQueue" prot="public">lt::ThreadSafeQueue</innerclass>
    <innernamespace refid="namespacelt">lt</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;condition_variable&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;deque&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelt" kindref="compound">lt</ref><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="18" refid="classlt_1_1ThreadSafeQueue" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classlt_1_1ThreadSafeQueue" kindref="compound">ThreadSafeQueue</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Queue<sp/>=<sp/>std::deque&lt;std::unique_ptr&lt;T&gt;&gt;;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="classlt_1_1ThreadSafeQueue_1a2df283b6d9d3818c5316cf347aeac6a0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlt_1_1ThreadSafeQueue_1a2df283b6d9d3818c5316cf347aeac6a0" kindref="member">ThreadSafeQueue</ref>(std::size_t<sp/>i_capacity<sp/>=<sp/>0)<sp/>:<sp/>m_capacity(i_capacity),<sp/>m_externalCondition(nullptr)<sp/>{}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="classlt_1_1ThreadSafeQueue_1a584270f5ad0cea1e36f037d165cd61d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classlt_1_1ThreadSafeQueue_1a584270f5ad0cea1e36f037d165cd61d4" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="28"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LockGuard<sp/>guard(m_mutex);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_queue.size();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="classlt_1_1ThreadSafeQueue_1a7d55d57f1c17f7ce0d380535f15cabe6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classlt_1_1ThreadSafeQueue_1a7d55d57f1c17f7ce0d380535f15cabe6" kindref="member">capacity</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_capacity;<sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="classlt_1_1ThreadSafeQueue_1a43a8608762f5e26fe7915294f8212d02" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlt_1_1ThreadSafeQueue_1a43a8608762f5e26fe7915294f8212d02" kindref="member">empty</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="38"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LockGuard<sp/>guard(m_mutex);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_queue.empty();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="classlt_1_1ThreadSafeQueue_1a39cba1199d3b28b2f902ef5ceec746d2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlt_1_1ThreadSafeQueue_1a39cba1199d3b28b2f902ef5ceec746d2" kindref="member">clear</ref>()</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LockGuard<sp/>guard(m_mutex);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_queue.clear();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="classlt_1_1ThreadSafeQueue_1a4a8eff2809936dfd831858a79f017279" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;T&gt;<sp/><ref refid="classlt_1_1ThreadSafeQueue_1a4a8eff2809936dfd831858a79f017279" kindref="member">pop</ref>(std::chrono::nanoseconds<sp/>i_wait<sp/>=<sp/>std::chrono::nanoseconds(0))</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LockGuard<sp/>guard(m_mutex);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_nonempty.wait_for(guard,<sp/>i_wait,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>return<sp/>!m_queue.empty();<sp/>}))<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>popped<sp/>=<sp/>std::move(m_queue.front());</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_queue.pop_front();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>popped;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="classlt_1_1ThreadSafeQueue_1ac4d51817b684b3a6cbce2f0f3a2a2430" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue<sp/><ref refid="classlt_1_1ThreadSafeQueue_1ac4d51817b684b3a6cbce2f0f3a2a2430" kindref="member">popAll</ref>(std::chrono::nanoseconds<sp/>i_wait<sp/>=<sp/>std::chrono::nanoseconds(0))</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Queue<sp/>queue;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LockGuard<sp/>guard(m_mutex);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_nonempty.wait_for(guard,<sp/>i_wait,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>return<sp/>!m_queue.empty();<sp/>}))<sp/>{<sp/>queue.swap(m_queue);<sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>queue;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="classlt_1_1ThreadSafeQueue_1af5c9ac9d2c1ff10f52ce7ea10fad1b54" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlt_1_1ThreadSafeQueue_1af5c9ac9d2c1ff10f52ce7ea10fad1b54" kindref="member">push</ref>(std::unique_ptr&lt;T&gt;<sp/>i_data)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LockGuard<sp/>guard(m_mutex);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_queue.push_back(std::move(i_data));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_capacity<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>m_queue.size()<sp/>&gt;<sp/>m_capacity)<sp/>{<sp/>m_queue.pop_front();<sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>guard.unlock();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_nonempty.notify_one();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_externalCondition)<sp/>{<sp/>m_externalCondition-&gt;notify_one();<sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="classlt_1_1ThreadSafeQueue_1a3b1b5e82e4f897c9d72e120410d8550c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlt_1_1ThreadSafeQueue_1a3b1b5e82e4f897c9d72e120410d8550c" kindref="member">push</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>i_data)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;T&gt;<sp/>dataPtr(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dataPtr<sp/>=<sp/>i_data;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlt_1_1ThreadSafeQueue_1af5c9ac9d2c1ff10f52ce7ea10fad1b54" kindref="member">push</ref>(std::move(dataPtr));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="classlt_1_1ThreadSafeQueue_1a923ca80a0b76ae89ebf76ce222690713" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlt_1_1ThreadSafeQueue_1a923ca80a0b76ae89ebf76ce222690713" kindref="member">pushAll</ref>(Queue&amp;&amp;<sp/>i_data)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LockGuard<sp/>guard(m_mutex);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>item<sp/>:<sp/>i_data)<sp/>{<sp/>m_queue.emplace_back(std::move(item));<sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(m_capacity<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>m_queue.size()<sp/>&gt;<sp/>m_capacity)<sp/>{<sp/>m_queue.pop_front();<sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>guard.unlock();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i_data.clear();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_nonempty.notify_one();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_externalCondition)<sp/>{<sp/>m_externalCondition-&gt;notify_one();<sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="125" refid="classlt_1_1ThreadSafeQueue_1a42a885b32a32cd49ab2ed4976abb36f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlt_1_1ThreadSafeQueue_1a42a885b32a32cd49ab2ed4976abb36f1" kindref="member">emplace</ref>(Args&amp;&amp;...<sp/>i_args)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LockGuard<sp/>guard(m_mutex);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_queue.emplace_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(std::forward&lt;Args&gt;(i_args)...));</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(m_capacity<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>m_queue.size()<sp/>&gt;<sp/>m_capacity)<sp/>{<sp/>m_queue.pop_front();<sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>guard.unlock();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_nonempty.notify_one();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_externalCondition)<sp/>{<sp/>m_externalCondition-&gt;notify_one();<sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="classlt_1_1ThreadSafeQueue_1af3e94952c56ed38db39c9ca96f260431" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlt_1_1ThreadSafeQueue_1af3e94952c56ed38db39c9ca96f260431" kindref="member">swap</ref>(<ref refid="classlt_1_1ThreadSafeQueue" kindref="compound">ThreadSafeQueue</ref>&amp;<sp/>io_other)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LockGuard<sp/>guard1(m_mutex,<sp/>std::defer_lock);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LockGuard<sp/>guard2(io_other.m_mutex,<sp/>std::defer_lock);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::lock(guard1,<sp/>guard2);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_queue.swap(io_other.m_queue);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="classlt_1_1ThreadSafeQueue_1a6ecd1591c57aa1daae915f2774f6946c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlt_1_1ThreadSafeQueue_1a6ecd1591c57aa1daae915f2774f6946c" kindref="member">attachToCondition</ref>(std::condition_variable*<sp/>i_condition)<sp/>{<sp/>m_externalCondition<sp/>=<sp/>i_condition;<sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="classlt_1_1ThreadSafeQueue_1a135cf746585ff5438273b5855f949eae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlt_1_1ThreadSafeQueue_1a135cf746585ff5438273b5855f949eae" kindref="member">detachFromCondition</ref>()<sp/>{<sp/>m_externalCondition<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>m_capacity;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue<sp/>m_queue;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>std::mutex<sp/>m_mutex;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>LockGuard<sp/>=<sp/>std::unique_lock&lt;std::mutex&gt;;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>std::condition_variable<sp/>m_nonempty;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>std::condition_variable*<sp/>m_externalCondition;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">};</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>QueuePtr<sp/>=<sp/>std::shared_ptr&lt;ThreadSafeQueue&lt;T&gt;&gt;;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>lt</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp"/>
  </compounddef>
</doxygen>

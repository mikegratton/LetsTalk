<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classlt_1_1ThreadSafeQueue" kind="class" language="C++" prot="public">
    <compoundname>lt::ThreadSafeQueue</compoundname>
    <includes refid="ThreadSafeQueue_8hpp" local="no">ThreadSafeQueue.hpp</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classlt_1_1ThreadSafeQueue_1aeb176cdfdcdf990819a81d3c8ee8fcfe" prot="public" static="no">
        <type>std::deque&lt; std::unique_ptr&lt; T &gt; &gt;</type>
        <definition>using lt::ThreadSafeQueue&lt; T &gt;::Queue =  std::deque&lt;std::unique_ptr&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>Queue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" line="20" column="5" bodyfile="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="classlt_1_1ThreadSafeQueue_1afbe3b9ac6e257f33c130ca7f6d621cde" prot="protected" static="no">
        <type>std::unique_lock&lt; std::mutex &gt;</type>
        <definition>using lt::ThreadSafeQueue&lt; T &gt;::LockGuard =  std::unique_lock&lt;std::mutex&gt;</definition>
        <argsstring></argsstring>
        <name>LockGuard</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" line="160" column="5" bodyfile="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" bodystart="160" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classlt_1_1ThreadSafeQueue_1ad7c5bc6f1d17fec545bd1f6853121020" prot="protected" static="no" mutable="no">
        <type>const std::size_t</type>
        <definition>const std::size_t lt::ThreadSafeQueue&lt; T &gt;::m_capacity</definition>
        <argsstring></argsstring>
        <name>m_capacity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" line="156" column="23" bodyfile="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlt_1_1ThreadSafeQueue_1a5deae10d8a53795a0653bf66a9a497f5" prot="protected" static="no" mutable="no">
        <type>Queue</type>
        <definition>Queue lt::ThreadSafeQueue&lt; T &gt;::m_queue</definition>
        <argsstring></argsstring>
        <name>m_queue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" line="158" column="11" bodyfile="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlt_1_1ThreadSafeQueue_1a955e6202daf9d1921fc95ac32f66a8d0" prot="protected" static="no" mutable="yes">
        <type>std::mutex</type>
        <definition>std::mutex lt::ThreadSafeQueue&lt; T &gt;::m_mutex</definition>
        <argsstring></argsstring>
        <name>m_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" line="159" column="24" bodyfile="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlt_1_1ThreadSafeQueue_1a5bc4a2f4efbd51925b6765835fa430a8" prot="protected" static="no" mutable="no">
        <type>std::condition_variable</type>
        <definition>std::condition_variable lt::ThreadSafeQueue&lt; T &gt;::m_nonempty</definition>
        <argsstring></argsstring>
        <name>m_nonempty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" line="161" column="29" bodyfile="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlt_1_1ThreadSafeQueue_1a6116069b0dbb7cf55673d9226319f382" prot="protected" static="no" mutable="no">
        <type>std::condition_variable *</type>
        <definition>std::condition_variable* lt::ThreadSafeQueue&lt; T &gt;::m_externalCondition</definition>
        <argsstring></argsstring>
        <name>m_externalCondition</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" line="162" column="29" bodyfile="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" bodystart="162" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlt_1_1ThreadSafeQueue_1a2df283b6d9d3818c5316cf347aeac6a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lt::ThreadSafeQueue&lt; T &gt;::ThreadSafeQueue</definition>
        <argsstring>(std::size_t i_capacity=0)</argsstring>
        <name>ThreadSafeQueue</name>
        <param>
          <type>std::size_t</type>
          <declname>i_capacity</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Construct a queue with an optional capacity bound. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i_capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>If nonzero, discard old samples when the queue length exceeds this value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" line="24" column="5" bodyfile="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" bodystart="24" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1ThreadSafeQueue_1a584270f5ad0cea1e36f037d165cd61d4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t lt::ThreadSafeQueue&lt; T &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>Number of samples in the queue. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" line="27" column="17" bodyfile="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" bodystart="27" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1ThreadSafeQueue_1a7d55d57f1c17f7ce0d380535f15cabe6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t lt::ThreadSafeQueue&lt; T &gt;::capacity</definition>
        <argsstring>() const</argsstring>
        <name>capacity</name>
        <briefdescription>
<para>Max capacity of the queue. If zero, the length is unlimited. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" line="34" column="17" bodyfile="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" bodystart="34" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1ThreadSafeQueue_1a43a8608762f5e26fe7915294f8212d02" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lt::ThreadSafeQueue&lt; T &gt;::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Check if the queue is empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" line="37" column="10" bodyfile="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" bodystart="37" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1ThreadSafeQueue_1a39cba1199d3b28b2f902ef5ceec746d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lt::ThreadSafeQueue&lt; T &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Empty the queue. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" line="44" column="10" bodyfile="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" bodystart="44" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1ThreadSafeQueue_1a4a8eff2809936dfd831858a79f017279" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::unique_ptr&lt; T &gt;</type>
        <definition>std::unique_ptr&lt;T&gt; lt::ThreadSafeQueue&lt; T &gt;::pop</definition>
        <argsstring>(std::chrono::nanoseconds i_wait=std::chrono::nanoseconds(0))</argsstring>
        <name>pop</name>
        <param>
          <type>std::chrono::nanoseconds</type>
          <declname>i_wait</declname>
          <defval>std::chrono::nanoseconds(0)</defval>
        </param>
        <briefdescription>
<para>Return the front element of the queue, removing it from the queue. </para>
        </briefdescription>
        <detaileddescription>
<para>If the queue is empty or if it is locked for longer than i_wait, return nullptr.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i_wait</parametername>
</parameternamelist>
<parameterdescription>
<para>Wait duration for access and data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" line="58" column="21" bodyfile="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" bodystart="58" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1ThreadSafeQueue_1ac4d51817b684b3a6cbce2f0f3a2a2430" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Queue</type>
        <definition>Queue lt::ThreadSafeQueue&lt; T &gt;::popAll</definition>
        <argsstring>(std::chrono::nanoseconds i_wait=std::chrono::nanoseconds(0))</argsstring>
        <name>popAll</name>
        <param>
          <type>std::chrono::nanoseconds</type>
          <declname>i_wait</declname>
          <defval>std::chrono::nanoseconds(0)</defval>
        </param>
        <briefdescription>
<para>Return the contents queue, emptying it. </para>
        </briefdescription>
        <detaileddescription>
<para>If the queue is empty or if it is locked for longer than i_wait, return an empty list.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i_wait</parametername>
</parameternamelist>
<parameterdescription>
<para>Wait duration for access and data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" line="76" column="11" bodyfile="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" bodystart="76" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1ThreadSafeQueue_1af5c9ac9d2c1ff10f52ce7ea10fad1b54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lt::ThreadSafeQueue&lt; T &gt;::push</definition>
        <argsstring>(std::unique_ptr&lt; T &gt; i_data)</argsstring>
        <name>push</name>
        <param>
          <type>std::unique_ptr&lt; T &gt;</type>
          <declname>i_data</declname>
        </param>
        <briefdescription>
<para>Move data onto back of queue. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" line="87" column="10" bodyfile="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" bodystart="87" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1ThreadSafeQueue_1a3b1b5e82e4f897c9d72e120410d8550c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lt::ThreadSafeQueue&lt; T &gt;::push</definition>
        <argsstring>(T const &amp;i_data)</argsstring>
        <name>push</name>
        <param>
          <type>T const &amp;</type>
          <declname>i_data</declname>
        </param>
        <briefdescription>
<para>Copy data onto the back of the queue. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" line="100" column="10" bodyfile="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" bodystart="100" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1ThreadSafeQueue_1a923ca80a0b76ae89ebf76ce222690713" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lt::ThreadSafeQueue&lt; T &gt;::pushAll</definition>
        <argsstring>(Queue &amp;&amp;i_data)</argsstring>
        <name>pushAll</name>
        <param>
          <type>Queue &amp;&amp;</type>
          <declname>i_data</declname>
        </param>
        <briefdescription>
<para>Move all data onto back of queue. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" line="110" column="10" bodyfile="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" bodystart="110" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1ThreadSafeQueue_1a42a885b32a32cd49ab2ed4976abb36f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void lt::ThreadSafeQueue&lt; T &gt;::emplace</definition>
        <argsstring>(Args &amp;&amp;... i_args)</argsstring>
        <name>emplace</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>i_args</declname>
        </param>
        <briefdescription>
<para>Construct T onto the back of the queue. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" line="125" column="10" bodyfile="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" bodystart="125" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1ThreadSafeQueue_1af3e94952c56ed38db39c9ca96f260431" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lt::ThreadSafeQueue&lt; T &gt;::swap</definition>
        <argsstring>(ThreadSafeQueue &amp;io_other)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classlt_1_1ThreadSafeQueue" kindref="compound">ThreadSafeQueue</ref> &amp;</type>
          <declname>io_other</declname>
        </param>
        <briefdescription>
<para>Swap contents with another queue. Handles deadlock avoidance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" line="138" column="10" bodyfile="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" bodystart="138" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1ThreadSafeQueue_1a6ecd1591c57aa1daae915f2774f6946c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lt::ThreadSafeQueue&lt; T &gt;::attachToCondition</definition>
        <argsstring>(std::condition_variable *i_condition)</argsstring>
        <name>attachToCondition</name>
        <param>
          <type>std::condition_variable *</type>
          <declname>i_condition</declname>
        </param>
        <briefdescription>
<para>Attach to another condition variable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Only one external condition may be attached at a time. (A queue can only be in one waitset) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" line="150" column="10" bodyfile="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classlt_1_1ThreadSafeQueue_1a135cf746585ff5438273b5855f949eae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lt::ThreadSafeQueue&lt; T &gt;::detachFromCondition</definition>
        <argsstring>()</argsstring>
        <name>detachFromCondition</name>
        <briefdescription>
<para>Detach the external condition variable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" line="153" column="10" bodyfile="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" bodystart="153" bodyend="153"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A simple producer/subscriber queue using unique_ptr. </para>
    </briefdescription>
    <detaileddescription>
<para>A thread-safe queue storing a deque of unique_ptr&lt;T&gt;&apos;s. Supports bulk push/pop operations. This queue is optionally bounded. If more items that the high water mark are inserted, the oldest items are discarded to keep the queue to the desired maximum size </para>
    </detaileddescription>
    <location file="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" line="18" column="1" bodyfile="/home/mike/git/letstalk/src/ThreadSafeQueue.hpp" bodystart="18" bodyend="163"/>
    <listofallmembers>
      <member refid="classlt_1_1ThreadSafeQueue_1a6ecd1591c57aa1daae915f2774f6946c" prot="public" virt="non-virtual"><scope>lt::ThreadSafeQueue</scope><name>attachToCondition</name></member>
      <member refid="classlt_1_1ThreadSafeQueue_1a7d55d57f1c17f7ce0d380535f15cabe6" prot="public" virt="non-virtual"><scope>lt::ThreadSafeQueue</scope><name>capacity</name></member>
      <member refid="classlt_1_1ThreadSafeQueue_1a39cba1199d3b28b2f902ef5ceec746d2" prot="public" virt="non-virtual"><scope>lt::ThreadSafeQueue</scope><name>clear</name></member>
      <member refid="classlt_1_1ThreadSafeQueue_1a135cf746585ff5438273b5855f949eae" prot="public" virt="non-virtual"><scope>lt::ThreadSafeQueue</scope><name>detachFromCondition</name></member>
      <member refid="classlt_1_1ThreadSafeQueue_1a42a885b32a32cd49ab2ed4976abb36f1" prot="public" virt="non-virtual"><scope>lt::ThreadSafeQueue</scope><name>emplace</name></member>
      <member refid="classlt_1_1ThreadSafeQueue_1a43a8608762f5e26fe7915294f8212d02" prot="public" virt="non-virtual"><scope>lt::ThreadSafeQueue</scope><name>empty</name></member>
      <member refid="classlt_1_1ThreadSafeQueue_1afbe3b9ac6e257f33c130ca7f6d621cde" prot="protected" virt="non-virtual"><scope>lt::ThreadSafeQueue</scope><name>LockGuard</name></member>
      <member refid="classlt_1_1ThreadSafeQueue_1ad7c5bc6f1d17fec545bd1f6853121020" prot="protected" virt="non-virtual"><scope>lt::ThreadSafeQueue</scope><name>m_capacity</name></member>
      <member refid="classlt_1_1ThreadSafeQueue_1a6116069b0dbb7cf55673d9226319f382" prot="protected" virt="non-virtual"><scope>lt::ThreadSafeQueue</scope><name>m_externalCondition</name></member>
      <member refid="classlt_1_1ThreadSafeQueue_1a955e6202daf9d1921fc95ac32f66a8d0" prot="protected" virt="non-virtual"><scope>lt::ThreadSafeQueue</scope><name>m_mutex</name></member>
      <member refid="classlt_1_1ThreadSafeQueue_1a5bc4a2f4efbd51925b6765835fa430a8" prot="protected" virt="non-virtual"><scope>lt::ThreadSafeQueue</scope><name>m_nonempty</name></member>
      <member refid="classlt_1_1ThreadSafeQueue_1a5deae10d8a53795a0653bf66a9a497f5" prot="protected" virt="non-virtual"><scope>lt::ThreadSafeQueue</scope><name>m_queue</name></member>
      <member refid="classlt_1_1ThreadSafeQueue_1a4a8eff2809936dfd831858a79f017279" prot="public" virt="non-virtual"><scope>lt::ThreadSafeQueue</scope><name>pop</name></member>
      <member refid="classlt_1_1ThreadSafeQueue_1ac4d51817b684b3a6cbce2f0f3a2a2430" prot="public" virt="non-virtual"><scope>lt::ThreadSafeQueue</scope><name>popAll</name></member>
      <member refid="classlt_1_1ThreadSafeQueue_1af5c9ac9d2c1ff10f52ce7ea10fad1b54" prot="public" virt="non-virtual"><scope>lt::ThreadSafeQueue</scope><name>push</name></member>
      <member refid="classlt_1_1ThreadSafeQueue_1a3b1b5e82e4f897c9d72e120410d8550c" prot="public" virt="non-virtual"><scope>lt::ThreadSafeQueue</scope><name>push</name></member>
      <member refid="classlt_1_1ThreadSafeQueue_1a923ca80a0b76ae89ebf76ce222690713" prot="public" virt="non-virtual"><scope>lt::ThreadSafeQueue</scope><name>pushAll</name></member>
      <member refid="classlt_1_1ThreadSafeQueue_1aeb176cdfdcdf990819a81d3c8ee8fcfe" prot="public" virt="non-virtual"><scope>lt::ThreadSafeQueue</scope><name>Queue</name></member>
      <member refid="classlt_1_1ThreadSafeQueue_1a584270f5ad0cea1e36f037d165cd61d4" prot="public" virt="non-virtual"><scope>lt::ThreadSafeQueue</scope><name>size</name></member>
      <member refid="classlt_1_1ThreadSafeQueue_1af3e94952c56ed38db39c9ca96f260431" prot="public" virt="non-virtual"><scope>lt::ThreadSafeQueue</scope><name>swap</name></member>
      <member refid="classlt_1_1ThreadSafeQueue_1a2df283b6d9d3818c5316cf347aeac6a0" prot="public" virt="non-virtual"><scope>lt::ThreadSafeQueue</scope><name>ThreadSafeQueue</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

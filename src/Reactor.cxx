// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Reactor.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Reactor.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define reactor_void_progress_max_cdr_typesize 4ULL;

#define reactor_command_max_cdr_typesize 4ULL;
#define reactor_progress_max_cdr_typesize 108ULL;
#define reactor_void_progress_max_key_cdr_typesize 0ULL;

#define reactor_command_max_key_cdr_typesize 0ULL;
#define reactor_progress_max_key_cdr_typesize 0ULL;

reactor_progress::reactor_progress()
{
    // long m_progress
    m_progress = 0;
    // sequence<octet> m_data


}

reactor_progress::~reactor_progress()
{


}

reactor_progress::reactor_progress(
        const reactor_progress& x)
{
    m_progress = x.m_progress;
    m_data = x.m_data;
}

reactor_progress::reactor_progress(
        reactor_progress&& x) noexcept 
{
    m_progress = x.m_progress;
    m_data = std::move(x.m_data);
}

reactor_progress& reactor_progress::operator =(
        const reactor_progress& x)
{

    m_progress = x.m_progress;
    m_data = x.m_data;

    return *this;
}

reactor_progress& reactor_progress::operator =(
        reactor_progress&& x) noexcept
{

    m_progress = x.m_progress;
    m_data = std::move(x.m_data);

    return *this;
}

bool reactor_progress::operator ==(
        const reactor_progress& x) const
{

    return (m_progress == x.m_progress && m_data == x.m_data);
}

bool reactor_progress::operator !=(
        const reactor_progress& x) const
{
    return !(*this == x);
}

size_t reactor_progress::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return reactor_progress_max_cdr_typesize;
}

size_t reactor_progress::getCdrSerializedSize(
        const reactor_progress& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.data().size() > 0)
    {
        current_alignment += (data.data().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }




    return current_alignment - initial_alignment;
}

void reactor_progress::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_progress;
    scdr << m_data;

}

void reactor_progress::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_progress;
    dcdr >> m_data;
}

/*!
 * @brief This function sets a value in member progress
 * @param _progress New value for member progress
 */
void reactor_progress::progress(
        int32_t _progress)
{
    m_progress = _progress;
}

/*!
 * @brief This function returns the value of member progress
 * @return Value of member progress
 */
int32_t reactor_progress::progress() const
{
    return m_progress;
}

/*!
 * @brief This function returns a reference to member progress
 * @return Reference to member progress
 */
int32_t& reactor_progress::progress()
{
    return m_progress;
}

/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void reactor_progress::data(
        const std::vector<uint8_t>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void reactor_progress::data(
        std::vector<uint8_t>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<uint8_t>& reactor_progress::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<uint8_t>& reactor_progress::data()
{
    return m_data;
}


size_t reactor_progress::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return reactor_progress_max_key_cdr_typesize;
}

bool reactor_progress::isKeyDefined()
{
    return false;
}

void reactor_progress::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

reactor_void_progress::reactor_void_progress()
{
    // long m_dummy
    m_dummy = 0;

}

reactor_void_progress::~reactor_void_progress()
{
}

reactor_void_progress::reactor_void_progress(
        const reactor_void_progress& x)
{
    m_dummy = x.m_dummy;
}

reactor_void_progress::reactor_void_progress(
        reactor_void_progress&& x) noexcept 
{
    m_dummy = x.m_dummy;
}

reactor_void_progress& reactor_void_progress::operator =(
        const reactor_void_progress& x)
{

    m_dummy = x.m_dummy;

    return *this;
}

reactor_void_progress& reactor_void_progress::operator =(
        reactor_void_progress&& x) noexcept
{

    m_dummy = x.m_dummy;

    return *this;
}

bool reactor_void_progress::operator ==(
        const reactor_void_progress& x) const
{

    return (m_dummy == x.m_dummy);
}

bool reactor_void_progress::operator !=(
        const reactor_void_progress& x) const
{
    return !(*this == x);
}

size_t reactor_void_progress::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return reactor_void_progress_max_cdr_typesize;
}

size_t reactor_void_progress::getCdrSerializedSize(
        const reactor_void_progress& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void reactor_void_progress::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_dummy;

}

void reactor_void_progress::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_dummy;
}

/*!
 * @brief This function sets a value in member dummy
 * @param _dummy New value for member dummy
 */
void reactor_void_progress::dummy(
        int32_t _dummy)
{
    m_dummy = _dummy;
}

/*!
 * @brief This function returns the value of member dummy
 * @return Value of member dummy
 */
int32_t reactor_void_progress::dummy() const
{
    return m_dummy;
}

/*!
 * @brief This function returns a reference to member dummy
 * @return Reference to member dummy
 */
int32_t& reactor_void_progress::dummy()
{
    return m_dummy;
}



size_t reactor_void_progress::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return reactor_void_progress_max_key_cdr_typesize;
}

bool reactor_void_progress::isKeyDefined()
{
    return false;
}

void reactor_void_progress::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


reactor_command::reactor_command()
{
    // Command m_command
    m_command = ::CANCEL;

}

reactor_command::~reactor_command()
{
}

reactor_command::reactor_command(
        const reactor_command& x)
{
    m_command = x.m_command;
}

reactor_command::reactor_command(
        reactor_command&& x) noexcept 
{
    m_command = x.m_command;
}

reactor_command& reactor_command::operator =(
        const reactor_command& x)
{

    m_command = x.m_command;

    return *this;
}

reactor_command& reactor_command::operator =(
        reactor_command&& x) noexcept
{

    m_command = x.m_command;

    return *this;
}

bool reactor_command::operator ==(
        const reactor_command& x) const
{

    return (m_command == x.m_command);
}

bool reactor_command::operator !=(
        const reactor_command& x) const
{
    return !(*this == x);
}

size_t reactor_command::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return reactor_command_max_cdr_typesize;
}

size_t reactor_command::getCdrSerializedSize(
        const reactor_command& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void reactor_command::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << (uint32_t)m_command;

}

void reactor_command::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_command = (Command)enum_value;
    }

}

/*!
 * @brief This function sets a value in member command
 * @param _command New value for member command
 */
void reactor_command::command(
        Command _command)
{
    m_command = _command;
}

/*!
 * @brief This function returns the value of member command
 * @return Value of member command
 */
Command reactor_command::command() const
{
    return m_command;
}

/*!
 * @brief This function returns a reference to member command
 * @return Reference to member command
 */
Command& reactor_command::command()
{
    return m_command;
}



size_t reactor_command::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return reactor_command_max_key_cdr_typesize;
}

bool reactor_command::isKeyDefined()
{
    return false;
}

void reactor_command::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

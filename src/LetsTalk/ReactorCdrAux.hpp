// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ReactorCdrAux.hpp
 * This source file contains some definitions of CDR related functions.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_REACTORCDRAUX_HPP_
#define _FAST_DDS_GENERATED_REACTORCDRAUX_HPP_

#include "Reactor.h"

constexpr uint32_t reactor_void_progress_max_cdr_typesize {8UL};
constexpr uint32_t reactor_void_progress_max_key_cdr_typesize {0UL};


constexpr uint32_t reactor_command_max_cdr_typesize {8UL};
constexpr uint32_t reactor_command_max_key_cdr_typesize {0UL};

constexpr uint32_t reactor_progress_max_cdr_typesize {112UL};
constexpr uint32_t reactor_progress_max_key_cdr_typesize {0UL};


namespace eprosima {
namespace fastcdr {

class Cdr;
class CdrSizeCalculator;
template <class T> struct CdrTypeProperties;

eProsima_user_DllExport void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const reactor_progress& data);

template <>
struct CdrTypeProperties<reactor_progress> {
    static constexpr uint32_t kMaxCdrTypeSize = reactor_progress_max_cdr_typesize;
    static constexpr uint32_t kMaxKeyCdrTypeSize = reactor_progress_max_key_cdr_typesize;
    static constexpr bool kHasKey = (reactor_progress_max_key_cdr_typesize == 0);
    static void serializeKey(Cdr& scdr, reactor_progress& data) { serialize_key(scdr, data); }
};
eProsima_user_DllExport void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const reactor_void_progress& data);

template <>
struct CdrTypeProperties<reactor_void_progress> {
    static constexpr uint32_t kMaxCdrTypeSize = reactor_void_progress_max_cdr_typesize;
    static constexpr uint32_t kMaxKeyCdrTypeSize = reactor_void_progress_max_key_cdr_typesize;
    static constexpr bool kHasKey = (reactor_void_progress_max_key_cdr_typesize == 0);
    static void serializeKey(Cdr& scdr, reactor_void_progress& data) { serialize_key(scdr, data); }
};

eProsima_user_DllExport void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const reactor_command& data);

template <>
struct CdrTypeProperties<reactor_command> {
    static constexpr uint32_t kMaxCdrTypeSize = reactor_command_max_cdr_typesize;
    static constexpr uint32_t kMaxKeyCdrTypeSize = reactor_command_max_key_cdr_typesize;
    static constexpr bool kHasKey = (reactor_command_max_key_cdr_typesize == 0);
    static void serializeKey(Cdr& scdr, reactor_command& data) { serialize_key(scdr, data); }
};

} // namespace fastcdr
} // namespace eprosima

#endif // _FAST_DDS_GENERATED_REACTORCDRAUX_HPP_
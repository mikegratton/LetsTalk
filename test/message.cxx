// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file message.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "message.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

message::message()
{
    // m_index com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3ecd23d9
    m_index = 0;
    // m_surprise com.eprosima.idl.parser.typecode.StringTypeCode@33723e30
    m_surprise ="";

}

message::~message()
{


}

message::message(
        const message& x)
{
    m_index = x.m_index;
    m_surprise = x.m_surprise;
}

message::message(
        message&& x)
{
    m_index = x.m_index;
    m_surprise = std::move(x.m_surprise);
}

message& message::operator =(
        const message& x)
{

    m_index = x.m_index;
    m_surprise = x.m_surprise;

    return *this;
}

message& message::operator =(
        message&& x)
{

    m_index = x.m_index;
    m_surprise = std::move(x.m_surprise);

    return *this;
}

bool message::operator ==(
        const message& x) const
{

    return (m_index == x.m_index && m_surprise == x.m_surprise);
}

bool message::operator !=(
        const message& x) const
{
    return !(*this == x);
}

size_t message::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t message::getCdrSerializedSize(
        const message& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.surprise().size() + 1;


    return current_alignment - initial_alignment;
}

void message::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_index;
    scdr << m_surprise.c_str();

}

void message::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_index;
    dcdr >> m_surprise;
}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void message::index(
        uint64_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint64_t message::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint64_t& message::index()
{
    return m_index;
}

/*!
 * @brief This function copies the value in member surprise
 * @param _surprise New value to be copied in member surprise
 */
void message::surprise(
        const std::string& _surprise)
{
    m_surprise = _surprise;
}

/*!
 * @brief This function moves the value in member surprise
 * @param _surprise New value to be moved in member surprise
 */
void message::surprise(
        std::string&& _surprise)
{
    m_surprise = std::move(_surprise);
}

/*!
 * @brief This function returns a constant reference to member surprise
 * @return Constant reference to member surprise
 */
const std::string& message::surprise() const
{
    return m_surprise;
}

/*!
 * @brief This function returns a reference to member surprise
 * @return Reference to member surprise
 */
std::string& message::surprise()
{
    return m_surprise;
}

size_t message::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool message::isKeyDefined()
{
    return false;
}

void message::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}
